// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And(a=instruction[15], b=true, out=compInstruction);
    Not(in=compInstruction, out=addrInstruction);

    And(a=compInstruction, b=instruction[5], out=writeA);
    And(a=compInstruction, b=instruction[4], out=writeD);
    And(a=compInstruction, b=instruction[3], out=writeM);

    Mux16(a=instruction, b=aluOut, sel=compInstruction, out=muxToA);
    Or(a=addrInstruction, b=writeA, out=loadA);
    ARegister(in=muxToA, load=loadA, out=A);
    And16(a=A, b=A, out[0..14]=addressM);

    Mux16(a=A, b=inM, sel=instruction[12], out=y);
    DRegister(in=aluOut, load=writeD, out=x);
    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=aluOut);
    And16(a=aluOut, b=aluOut, out=outM);

    Not(in=ng, out=ngNot);
    Not(in=zr, out=zrNot);
    And(a=ngNot, b=zrNot, out=jgt);
    Or(a=ngNot, b=zr, out=jge);
    Or(a=ng, b=zr, out=jle);
    Mux(a=false, b=ng, sel=instruction[2], out=jmp1);
    Mux(a=jgt, b=zrNot, sel=instruction[2], out=jmp2);
    Mux(a=zr, b=jle, sel=instruction[2], out=jmp3);
    Mux(a=jge, b=true, sel=instruction[2], out=jmp4);
    Mux(a=jmp1, b=jmp3, sel=instruction[1], out=jmp5);
    Mux(a=jmp2, b=jmp4, sel=instruction[1], out=jmp6);
    Mux(a=jmp5, b=jmp6, sel=instruction[0], out=jmp);
    And(a=jmp, b=compInstruction, out=loadPC);
    PC(in=A, inc=true, load=loadPC, reset=reset, out[0..14]=pc);
}
